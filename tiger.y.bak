%{
#include <stdio.h>
#include <stdlib.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h" 
#include "absyn.h"
#include "prabsyn.h"

int yylex(void);

A_exp absyn_root;

FILE *pont_arq;

void printTest(string field)
{
  //printf("Eu sou %s\n", field);
}

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

%locations

%union {
	int pos;
	int ival;
	string sval;
      A_exp exp;
      A_decList declist;
}

%error-verbose
%token <sval> ID STRING
%token <ival> INT

%token COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
%token LBRACE RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
%token AND OR ASSIGN ARRAY IF THEN ELSE WHILE FOR TO LET IN END OF 
%token BREAK NIL FUNCTION VAR TYPE DO NULLCOALESCE

%type <exp> program root exp explist let
%type <declist> decs decs_nonempty

%type <exp> exp_em exp expseq
%type <explist> actuals  nonemptyactuals sequencing  sequencing_exps
%type <var>  lvalue one oneormore
%type <declist> decs decs_nonempty
%type <dec>  decs_nonempty_s vardec
%type <efieldlist> rec rec_nonempty 
%type <efield> rec_one
%type <nametylist> tydec
%type <namety>  tydec_one
%type <fieldlist> tyfields tyfields_nonempty
%type <ty> ty
%type <fundeclist> fundec
%type <fundec> fundec_one



%nonassoc LOWER
%nonassoc LOW

%start program

%%

program: root {absyn_root = $1;};

root: /* empty */ {$$ = NULL;}
      | exp {$$ = $1;}
      ;

exp:    let {$$ = $1;}
      | prim {$$ = $1;}
      | lvalue {$$ = $1;}
      | lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}
      | LPAREN explist RPAREN {$$ = A_SeqExp(EM_tokPos,$2);}
      | cond {$$ = $1;}
      | loop {$$ = $1;}
      | compar {$$ = $1;}
      | arit {$$ = $1;}
      | callfunc {$$ = $1;}
      | arrdec {$$ = $1;}
      | ID LBRACE reclist RBRACE {$$ = A_RecordExp(EM_tokPos,S_Symbol($1),$3);}
      | BREAK {$$ = A_BreakExp(EM_tokPos);}
      ;

arit:  valarit PLUS valarit {$$ = A_OpExp(EM_tokPos,A_plusOp,$1,$3);}
      | valarit DIVIDE valarit {$$ = A_OpExp(EM_tokPos,A_divideOp,$1,$3);}
      | valarit MINUS valarit {$$ = A_OpExp(EM_tokPos,A_minusOp,$1,$3);}
      | valarit TIMES valarit {$$ = A_OpExp(EM_tokPos,A_timesOp,$1,$3);}  
      ;

valarit: lvalue {$$ = $1;}
      | prim {$$ = $1;}
      | callfunc {$$ = $1;}
      ;

callfunc: ID LPAREN arglist RPAREN {$$ = A_CallExp(EM_tokPos,S_Symbol($1),$3);}
      ;

compar: exp OR exp {$$ = A_IfExp(EM_tokPos,$1,A_IntExp(EM_tokPos,1),$3);}
      | exp AND exp {$$ = A_IfExp(EM_tokPos,$1,$3,A_IntExp(EM_tokPos,0));}
      | exp LT exp {$$ = A_OpExp(EM_tokPos,A_ltOp,$1,$3);}
      | exp GT exp {$$ = A_OpExp(EM_tokPos,A_gtOp,$1,$3);}
      | exp LE exp {$$ = A_OpExp(EM_tokPos,A_leOp,$1,$3);}
      | exp GE exp {$$ = A_OpExp(EM_tokPos,A_geOp,$1,$3);}
      | exp EQ exp {$$ = A_OpExp(EM_tokPos,A_eqOp,$1,$3);}
      | exp NEQ exp {$$ = A_OpExp(EM_tokPos,A_neqOp,$1,$3);}
      | exp NULLCOALESCE exp {printTest("NULLCOALESCE");}
      ;

let:  LET decs IN explist END {$$=A_LetExp(EM_tokPos, $2, $4);}
      ;

prim: int {$$ = $1;}
      | STRING {$$ = A_StringExp(EM_tokPos,$1);}
      | NIL {$$ = A_NilExp(EM_tokPos);}
      | MINUS int {$$ = A_OpExp(EM_tokPos,A_minusOp,A_IntExp(EM_tokPos,0),$2);}
      ;

reclist:    /* empty */ {$$ = NULL}
      | ID EQ exp	{$$ = A_EfieldList($1,NULL);}
      | ID EQ exp	COMMA reclist {$$ = A_EfieldList($1,$3);}
      ;

arglist:    /* empty */ {$$ = NULL}
      | nonarglist {$$ = $1}
      ;

nonarglist: exp {$$ = A_ExpList($1,NULL);}
      | exp COMMA nonarglist {$$ = A_ExpList($1,$3);}
      ;

decs: /* empty */ {$$ = NULL;}
      | dec decs {$$ = $1;}
      ;

dec:  tydec {$$ = A_TypeDec(EM_tokPos,$1);}
      | vardec {$$ = $1;}
      | fundec {$$ = A_FunctionDec(EM_tokPos,$1);}
      ;

arrdec:     ID LBRACK exp RBRACK OF exp {$$ = A_ArrayExp(EM_tokPos,S_Symbol($1),$3,$6);}
      ;

lvalue:     ID {$$ = A_SimpleVar(EM_tokPos,S_Symbol($1));}
      | oneormore  {$$ = $1;}
      ;

oneormore:  one {$$ = $1;}
      |oneormore DOT ID   {$$ = A_FieldVar(EM_tokPos,$1,S_Symbol($3));}
      |oneormore LBRACK exp RBRACK   {$$ = A_SubscriptVar(EM_tokPos,$1,$3);}
      ;

one:  ID DOT ID  {$$ = A_FieldVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),S_Symbol($3));}
      | ID LBRACK exp RBRACK  %prec LOWER  {$$ = A_SubscriptVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),$3);}
      ;

explist:    /* empty */ {$$ = NULL;}
      | exp	{$$ = A_SeqExp(EM_tokPos,$1);}
      | exp SEMICOLON explist {$$ = A_ExpList($1,$3);}
      ;

cond: IF exp THEN exp ELSE exp {$$ = A_IfExp(EM_tokPos,$2,$4,$6);}
      | IF exp THEN exp	%prec LOW {$$ = A_IfExp(EM_tokPos,$2,$4,NULL);}
      ;      

loop: WHILE exp DO exp {$$ = A_WhileExp(EM_tokPos,$2,$4);}
      | FOR ID ASSIGN exp TO exp DO exp {$$ = A_ForExp(EM_tokPos,S_Symbol($2),$4,$6,$8);}
      ;

tydec:      TYPE ID EQ ty {$$ = A_Namety(S_Symbol($2),$4);}
      ;

ty:   ID {$$ = A_NameTy(EM_tokPos,S_Symbol($1));}
      | LBRACE tyfields RBRACE {$$ = A_RecordTy(EM_tokPos,$2);}
      | ARRAY OF ID {$$ = A_ArrayTy(EM_tokPos,S_Symbol($3));}
      ;

tyfields:   /* empty */	{}
      | ID COLON ID {$$ = A_FieldList(A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3)),NULL);}
      | ID COLON ID COMMA tyfields {$$ = A_FieldList(A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3)),$5);}
      ;

vardec: VAR ID ASSIGN exp {$$ = A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol(""),$4);}
      | VAR ID COLON ID ASSIGN exp {$$ = A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol($4),$6);}
      ;

int: INT {$$ = A_IntExp(EM_tokPos,$1);}
      ;

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp {$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol(""),$7);}
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	{$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol($7),$9);}
      ;

%%

extern int yyparse(void);

void parse(string fname) 
{EM_reset(fname);
 if (yyparse() == 0) /* parsing worked */
   fprintf(stderr,"Parsing successful!\n");
 else fprintf(stderr,"Parsing failed\n");
}

void printTree() {
 pont_arq = fopen("arquivo.txt", "w+"); 
 pr_exp(pont_arq, absyn_root, 0);
 fclose(pont_arq);
}

int main(int argc, char **argv) {
 if (argc!=2) {fprintf(stderr,"usage: a.out filename\n"); exit(1);}
 parse(argv[1]);
 printTree();
 return 0;
}